name: Shared Bitbucket Cloud Export

on:
  workflow_call:
    inputs:
      migration-guid:
        default: migration-archive-${{ github.event.issue.number }}
        type: string
    secrets:
      BITBUCKET_CLOUD_ADMIN_TOKEN:
        required: true
      GHEC_ADMIN_TOKEN:
        required: true

jobs:
  export:
    name: Export
    runs-on: ubuntu-latest

    if: |
      github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '/run-dry-run-migration') || startsWith(github.event.comment.body, '/run-production-migration'))

    env:
      MIGRATION_GUID: ${{ inputs.migration-guid }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Update issue with running status
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:hourglass_flowing_sand: Running migration. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Parse repositories from issue body
        id: parse-issue-body
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const options = {
              targetOrganization: '${{ vars.GHEC_TARGET_ORGANIZATION }}'
            }
            const parsedIssueBody = require('./.github/scripts/parse-issue-body.js')({github, context, core, options})

            fs.writeFileSync('./repositories.txt', parsedIssueBody.repositories.trim())

      - name: Log repositories to migrate
        run: cat repositories.txt

      - name: Check if repositories exist
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GHEC_ADMIN_TOKEN }}
          script: |
            const options = {
              targetOrganization: '${{ vars.GHEC_TARGET_ORGANIZATION }}',
              repositories: ${{ steps.parse-issue-body.outputs.repositories-json }}
            }

            await require('./.github/scripts/check-existing-repos.js')({github, context, core, options})

      - name: Create empty repositories on GitHub
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GHEC_ADMIN_TOKEN }}
          script: |
            const options = {
              targetOrganization: '${{ vars.GHEC_TARGET_ORGANIZATION }}',
              targetRepositoryVisibility: '${{ steps.parse-issue-body.outputs.target-visibility }}',
              repositories: ${{ steps.parse-issue-body.outputs.repositories-json }}
            }

            await require('./.github/scripts/create-repos.js')({github, context, core, options})

      - name: Clone from Bitbucket Cloud and push to GitHub Enterprise Cloud
        id: clone-and-push
        run: |
          # Group cat and echo to avoid missing newline at the end
          # Otherwise the last line in repositories.txt is ignored
          { cat "./repositories.txt"; echo; } | while read line;
          do
            # Strip project name
            repo=${line#*,}

            echo "Cloning $repo..."

            # Clone repository
            mkdir -p /tmp/${{ env.MIGRATION_GUID }}
            git clone "https://x-token-auth:${{ secrets.BITBUCKET_CLOUD_ADMIN_TOKEN }}@bitbucket.org/${{ vars.BITBUCKET_CLOUD_WORKSPACE }}/$repo.git" "/tmp/${{ env.MIGRATION_GUID }}/$repo"

            # Check for errors
            ERROR_CODE=$?
            if [ ${ERROR_CODE} -ne 0 ]; then
              echo "::error::Failed to clone repository: $repo"
              echo "step=clone" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "::debug::Successfuly cloned repository"
            fi
          done

      #- name: Update remote URL
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: ${{ env.MIGRATION_GUID }}.tar.gz
      #    path: ${{ github.workspace }}/${{ env.MIGRATION_GUID }}.tar.gz
      #    if-no-files-found: error
      #    retention-days: 1

      #- if: ${{ failure() }}
      #  name: Update issue with failed export
      #  uses: actions/github-script@v6
      #  with:
      #    script: |
      #      const body = `:no_entry: **Export failed.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

      #      await github.rest.issues.createComment({
      #        issue_number: context.issue.number,
      #        owner: context.repo.owner,
      #        repo: context.repo.repo,
      #        body
      #      })

      #- if: ${{ success() }}
      #  name: Update issue with successful export
      #  uses: actions/github-script@v6
      #  with:
      #    script: |
      #      const body = `:white_check_mark: **Export successful.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

      #      await github.rest.issues.createComment({
      #        issue_number: context.issue.number,
      #        owner: context.repo.owner,
      #        repo: context.repo.repo,
      #        body
      #      })
