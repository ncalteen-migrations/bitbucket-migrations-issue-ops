name: Migration from Bitbucket Cloud

on:
  issue_comment:
    types:
      - created

jobs:
  export:
    name: Export
    runs-on: ubuntu-latest

    # Only run when the following are true:
    #   - `bitbucket-cloud` label present
    #   - `migration` label present
    #   - `/run-dry-run-migration` or `/run-production-migration` comment added
    if: |
      contains(toJson(github.event.issue.labels.*.name), 'bitbucket-cloud') &&
      contains(toJson(github.event.*.labels.*.name), 'migration') &&
      github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '/run-dry-run-migration') || startsWith(github.event.comment.body, '/run-production-migration'))

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Update issue with running status
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:hourglass_flowing_sand: Running migration. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Parse repositories from issue body
        id: parse
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const parse = require('./.github/scripts/parse-issue-body.js')

            const options = {}
            const parsedIssueBody = parse({github, context, core, options})

            fs.writeFileSync('./repositories.txt', parsedIssueBody.repositories.trim())

      - name: Log repositories to migrate
        run: cat repositories.txt

      - name: Check if repositories exist
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GHEC_ADMIN_TOKEN }}
          script: |
            const checkExistingRepos = require('./.github/scripts/check-existing-repos.js')

            const options = {
              targetOrganization: '${{ vars.GHEC_TARGET_ORGANIZATION }}',
              repositories: ${{ steps.parse.outputs.repositories-json }}
            }

            await checkExistingRepos({github, context, core, options})

      - name: Upload repositories artifact
        uses: actions/upload-artifact@v3
        with:
          name: repositories.txt
          path: repositories.txt
          if-no-files-found: error
          retention-days: 1

      - if: ${{ failure() }}
        name: Update issue with failed migration
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:no_entry: **Migration failed.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

  import:
    name: Import
    needs: export
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set migration type
        id: migration-type
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            return context.payload.comment.body.match('dry-run') ? 'Dry-run' : 'Production'

      - name: Download repository list
        uses: actions/download-artifact@v2
        with:
          name: repositories.txt
          path: .

      - name: Create empty repositories on GitHub Enterprise Cloud
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GHEC_ADMIN_TOKEN }}
          script: |
            const createRepos = require('./.github/scripts/create-repos.js')
            const fs = require('fs')

            const options = {
              targetOrganization: '${{ vars.GHEC_TARGET_ORGANIZATION }}',
              targetRepositoryVisibility: '${{ steps.parse-issue-body.outputs.target-visibility }}',
              repositories: fs.readFileSync('./repositories.txt', 'utf8').split(/[\r\n]+/)
            }

            await createRepos({github, context, core, options})

      - name: Clone from Bitbucket Cloud and push to GitHub Enterprise Cloud
        id: clone-and-push
        uses: actions/github-script@v6
        env:
          BITBUCKET_CLOUD_WORKSPACE: ${{ vars.BITBUCKET_CLOUD_WORKSPACE }}
          BITBUCKET_CLOUD_ADMIN_TOKEN:
            ${{ secrets.BITBUCKET_CLOUD_ADMIN_TOKEN }}
          GHEC_ADMIN_TOKEN: ${{ secrets.GHEC_ADMIN_TOKEN }}
        with:
          github-token: ${{ secrets.GHEC_ADMIN_TOKEN }}
          script: |
            const cloneRepos = require('./.github/scripts/clone-repos.js')

            const options = {
              targetOrganization: '${{ vars.GHEC_TARGET_ORGANIZATION }}',
              repositories: repositories,
              temp: '${{ runner.temp }}'
            }

            await cloneRepos({github, context, core, options, exec})

      - if: ${{ failure() }}
        name: Update issue with failed migration
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:no_entry: **Migration failed.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - if: ${{ success() }}
        name: Update issue with successful migration
        uses: actions/github-script@v6
        with:
          script: |
            const migrationType = '${{ steps.migration-type.outputs.result }}'

            let body = `:white_check_mark: **Migration successful.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            if (migrationType === 'Dry-run') {
              body = `:white_check_mark: **Migration successful.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              In order to delete the migrated repositories from the dry-run, add a comment with the following slash command:

              \`\`\`plain
              /delete-repositories
              \`\`\``
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
