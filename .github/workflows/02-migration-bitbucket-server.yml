name: Migration from Bitbucket Server

on:
  issue_comment:
    types:
      - created

jobs:
  export:
    name: Export
    runs-on: ubuntu-latest

    # Only run when the following are true:
    #   - `bitbucket-server` label present
    #   - `migration` label present
    #   - `/run-dry-run-migration` or `/run-production-migration` comment added
    if: |
      contains(toJson(github.event.issue.labels.*.name), 'bitbucket-server') &&
      contains(toJson(github.event.*.labels.*.name), 'migration') &&
      github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '/run-dry-run-migration') || startsWith(github.event.comment.body, '/run-production-migration'))

    env:
      MIGRATION_GUID: migration-archive-${{ github.event.issue.number }}
      BITBUCKET_SERVER_API_TOKEN: ${{ secrets.BITBUCKET_SERVER_API_TOKEN }}
      BITBUCKET_SERVER_URL: ${{ secrets.BITBUCKET_SERVER_URL }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Update issue with running status
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:hourglass_flowing_sand: Running migration. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Parse repositories from issue body
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const parse = require('./.github/scripts/parse-issue-body.js')

            const options = {}
            const parsedIssueBody = parse({github, context, core, options})

            fs.writeFileSync('./repositories.txt', parsedIssueBody.repositories.trim())

      - name: Log repositories to migrate
        run: cat repositories.txt

      # Required for the `bbs-exporter` utility
      # If running on a self-hosted runner, this may be worth setting up on the
      #   the runner directly, instead of calling in the workflow each time.
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.4

      - name: Bootstrap Bitbucket Server exporter
        working-directory: ./tools/bbs-exporter
        run: chmod +x ./script/bootstrap && ./script/bootstrap

      - name: Export from Bitbucket Server
        working-directory: ./tools/bbs-exporter
        run: |
          bbs-exporter -f ../../repositories.txt -o ../../${{ env.MIGRATION_GUID }}.tar.gz

      - name: Upload migration archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MIGRATION_GUID }}.tar.gz
          path: ${{ github.workspace }}/${{ env.MIGRATION_GUID }}.tar.gz
          if-no-files-found: error
          retention-days: 1

      - if: ${{ failure() }}
        name: Update issue with failed export
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:no_entry: **Export failed.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - if: ${{ success() }}
        name: Update issue with successful export
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:white_check_mark: **Export successful.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

  import:
    name: Import
    needs: export
    runs-on: ubuntu-latest

    env:
      MIGRATION_GUID: migration-archive-${{ github.event.issue.number }}
      USER_MAPPINGS_PATH: ../../user-mappings.csv
      BBS_USER_MAPPING_URL: ${{ vars.BBS_URL }}/users/

    defaults:
      run:
        working-directory: ./tools/ghec-importer

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set migration type
        id: migration-type
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            return context.payload.comment.body.match('dry-run') ? 'Dry-run' : 'Production'

      - name: Parse issue body
        id: parse
        uses: actions/github-script@v6
        with:
          script: |
            require('./.github/scripts/parse-issue-body.js')({context, core})

      - name: Download migration archive
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.MIGRATION_GUID }}.tar.gz

      - name: Get users in migration archive
        run: |
          users=$(tar -zxf ../../${{ env.MIGRATION_GUID }}.tar.gz --wildcards 'users_*.json' --to-stdout | jq -r '.[].login' | sort | uniq)
          echo "source,target" > ../../subset-user-mappings.csv
          for i in $users; do echo $i; grep $i"," ${{ env.USER_MAPPINGS_PATH }} >> ../../subset-user-mappings.csv || echo "$i not found in user-mappings.csv"; done

      - name: Log users in migration archive
        run: cat ../../subset-user-mappings.csv

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Avoid husky from running and failing (.git can't be found) by clearing prepare script.
      - name: Install dependencies
        run: |
          npm install -g npm@8
          npm set-script prepare ""
          npm ci --omit=dev

      - name: Link GHEC Importer
        run: npm link

      - name: Run import
        id: import
        run: ghec-importer import ../../${{ env.MIGRATION_GUID }}.tar.gz --debug
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHEC_IMPORTER_ADMIN_TOKEN: ${{ secrets.GHEC_ADMIN_TOKEN }}
          GHEC_IMPORTER_TARGET_ORGANIZATION:
            ${{ vars.GHEC_TARGET_ORGANIZATION }}
          GHEC_IMPORTER_RESOLVE_REPOSITORY_RENAMES: guid-suffix
          GHEC_IMPORTER_DISALLOW_TEAM_MERGES: true
          GHEC_IMPORTER_USER_MAPPINGS_PATH: ../../subset-user-mappings.csv
          GHEC_IMPORTER_USER_MAPPINGS_SOURCE_URL:
            ${{ env.BBS_USER_MAPPING_URL }}
          GHEC_IMPORTER_MAKE_INTERNAL:
            ${{ steps.parse.outputs.target-visibility == 'Internal' }}

          # Terminate process with non-zero exit code if file system operations
          # fail (https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode)
          NODE_OPTIONS: --unhandled-rejections=strict

      - if: ${{ failure() }}
        name: Report failed migration
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:no_entry: **${{ steps.migration-type.outputs.result }} migration failed.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - if: ${{ success() }}
        name: Add delete repository comment
        uses: actions/github-script@v6
        with:
          script: |
            const migrationType = '${{ steps.migration-type.outputs.result }}'

            if (migrationType === 'Dry-run') {
              let body = `In order to delete the migrated repositories of the
              dry-run, add a comment with the following slash command:

              \`\`\`plain
              /delete-repositories ${{ steps.import.outputs.migration-guid }}
              \`\`\``

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              })
            }
